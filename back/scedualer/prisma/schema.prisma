generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

generator erd {
  provider = "prisma-erd-generator"
  // output   = "../ERD.pdf"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum typeOfShift {
  short
  long
}

enum shiftTimeClassification {
  morning
  noon
  noonCanceled
  night
  other
}

enum serverRole {
  admin
  user
}

enum scheduleType {
  userSchedule
  systemSchedule
}

enum requestStatus {
  pending
  sent
  received
  seen
  replied
  approved
}

model shift {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  
  shiftName      String
  typeOfShift    typeOfShift?
  shiftTimeName shiftTimeClassification?
  shiftStartHour DateTime?
  shiftEndHour   DateTime?
  
  
  userId         Int?
  userRef        user?           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userPreference String?
  scheduleId     Int?
  shiftType      scheduleType
  schedule       schedule?       @relation(fields: [scheduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userRequests   userRequest[]
  shiftRoles     UserShiftRole[]

  @@map("shift")
}

model schedule {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  scheduleStart       DateTime
  scheduleEnd         DateTime
  scheduleType        scheduleType
  scheduleDue         DateTime?
  userId              Int?
  shiftUserStatistics ShiftUserStatistic[]
  user                user?                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  shifts              shift[]

  @@map("schedule")
}

model user {
  id                   Int                  @id @default(autoincrement())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  email                String               @unique
  hash                 String
  userServerRole       serverRole           @default(user)
  userLevel            Int?                 @default(1)
  userProfile          UserProfile?
  roleId               Int?
  role                 Role?                @relation("UserRole", fields: [roleId], references: [id])
  shifts               shift[]
  schedules            schedule[]
  userSentRequests     userRequest[]        @relation("SentRequests")
  userAcceptedRequests userRequest[]        @relation("AcceptedRequests")
  facilityId           Int?
  facility             Facility?            @relation(fields: [facilityId], references: [id])
  assignedShiftRoles   UserShiftRole[]
  shiftStatistics      ShiftUserStatistic[]

  @@map("users")
}

model UserProfile {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  phoneNumber String?
  
  user      user    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}

model Facility {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  users        user[]
  scheduleMold ScheduleMold[]
}

model userRequest {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  senderId          Int
  senderUserRef     user?         @relation(name: "SentRequests", fields: [senderId], references: [id])
  destinationUserId Int
  acceptingUserRef  user?         @relation(name: "AcceptedRequests", fields: [destinationUserId], references: [id])
  status            requestStatus @default(pending)
  isAnswered        Boolean       @default(false)
  requestAnswer     String?
  requestAnswerMsg  String?
  requestAnswerSeen Boolean?
  requestMsg        String?
  isApproved        Boolean       @default(false)
  shiftId           Int
  shift             shift?        @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([senderId, destinationUserId, shiftId])
}

model ShiftUserStatistic {
  scheduleId    Int      @map("schedule_id")
  userId        Int      @map("user_id")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  morningShifts Int
  noonShifts    Int
  nightShifts   Int
  overTimeStep1 Int
  overTimeStep2 Int
  restDayHours  Int
  user          user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  schedule      schedule @relation(fields: [scheduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, scheduleId])
  @@map("shift_statistic")
}

model ScheduleMold {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  name            String          @default("Default Settings")
  description     String?
  daysPerSchedule Int
  selected        Boolean
  facilityId      Int
  facility        Facility        @relation(fields: [facilityId], references: [id])
  shiftsTemplate  ShiftMold[]
  scheduleTime    ScheduleTime?   @relation("ScheduleTimeRelation", fields: [scheduleTimeId], references: [id])
  scheduleTimeId  Int?            @unique
  restDays        ScheduleTime?   @relation("RestDays", fields: [restDaysId], references: [id])
  restDaysId      Int?            @unique
  // requiredRoles   RoleShiftMold[]

 
}


model ScheduleTime {
  id        Int    @id @default(autoincrement())
  name      String?
  startDay  Int
  startHour Int 
  startMinutes Int
  endMinutes Int
  endDay    Int
  endHour   Int

  scheduleMoldForScheduleTime ScheduleMold? @relation("ScheduleTimeRelation")
  scheduleMoldForRestDays     ScheduleMold? @relation("RestDays")
}

model ShiftMold {
  id            Int              @id @default(autoincrement())
  name          String
  startHour     String
  endHour       String
  day           Int
  schedule      ScheduleMold     @relation(fields: [scheduleId], references: [id])
  scheduleId    Int
  userPrefs     UserPreference[]
  RoleShiftMold RoleShiftMold[]
}

model RoleShiftMold {
  shiftMoldId    Int
  roleId         Int
  shiftMold      ShiftMold     @relation(fields: [shiftMoldId], references: [id])
  role           Role          @relation(fields: [roleId], references: [id])
  // ScheduleMold   ScheduleMold? @relation(fields: [scheduleMoldId], references: [id])
  scheduleMoldId Int?

  @@id([shiftMoldId, roleId])
}

model UserShiftRole {
  id      Int    @id @default(autoincrement()) // Add a primary key for the model
  shiftId Int
  roleId  Int
  userId  Int?   // Make userId optional
  shift   shift  @relation(fields: [shiftId], references: [id])
  role    Role   @relation(fields: [roleId], references: [id])
  user    user?  @relation(fields: [userId], references: [id]) 

  @@unique([shiftId, roleId, userId], name: "userShiftRoleUniqueConstraint") // Enforce uniqueness for non-null userIds
}
model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  shiftMolds      RoleShiftMold[]
  userShiftRoles  UserShiftRole[]
  users           user[]           @relation("UserRole")
  userPreferences UserPreference[]
}

model UserPreference {
  id          Int       @id @default(autoincrement())
  shiftMoldId Int
  shiftMold   ShiftMold @relation(fields: [shiftMoldId], references: [id])
  roleId      Int
  role        Role      @relation(fields: [roleId], references: [id])
  userCount   Int
}
