// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum typeOfShift {
  short
  long
}

enum shiftType {
  morning
  noon
  noonCanceled
  night
}

enum typeOfUser {
  headOfLocation
  headOfShift
  veteren
  mid
  new
}

enum Role {
  admin
  user
}

enum shcheduleType {
  userSchedule
  systemSchedule
}

enum requestStatus {
  pending
  sent
  recived
  seen
}

model shift {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  shiftDate       DateTime?
  shiftType       shiftType
  typeOfShift     typeOfShift? //short or long =  8 /12 
  shifttStartHour DateTime?
  shiftEndHour    DateTime?

  userId         Int?
  userRef        user?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userPreference String?

  scheduleId   Int?
  schedule     schedule?     @relation(fields: [scheduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userRequests userRequest[]

  @@map("shift")
}

model schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  scedualStart DateTime
  scedualEnd   DateTime
  sceduleType  shcheduleType
  scedhuleDue  DateTime?

  userId              Int?
  shiftUserStatistics ShiftUserStatistic[]
  user                user?                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  shifts shift[]

  @@map("schedule")
}

model user {
  id                   Int                  @id @default(autoincrement())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  userRole             Role                 @default(user)
  userLevel            Int?                 @default(1)
  typeOfUser           typeOfUser           @default(new)
  email                String               @unique
  hash                 String
  firstName            String?
  lastName             String?
  shiftUserStatistics  ShiftUserStatistic[]
  shifts               shift[]
  schedual             schedule[]
  userSentRequests     userRequest[]        @relation("SentRequests")
  userAcceptedRequests userRequest[]        @relation("AcceptedRequests")

  @@map("users")
}

model userRequest {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  senderId           Int
  senderUserRef      user?         @relation(name: "SentRequests", fields: [senderId], references: [id])
  destionationUserId Int
  acceptingUserRef   user?         @relation(name: "AcceptedRequests", fields: [destionationUserId], references: [id])
  status             requestStatus @default(pending)
  isAnswered         Boolean       @default(false)
  requestAnswer      String?
  requsetMsg         String?
  shiftId            Int
  shift              shift?        @relation(fields: [shiftId], references: [id])

  @@unique([senderId, destionationUserId, shiftId])
}

model ShiftUserStatistic {
  scheduleId    Int      @map("schedule_id")
  userId        Int      @map("user_id")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  morningShifts Int
  noonShifts    Int
  nightShifts   Int
  overTimeStep1 Int
  overTimeStep2 Int
  restDayHours  Int
  user          user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  schedule      schedule @relation(fields: [scheduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, scheduleId])
  @@map("shift_statistic")
}
